1 开闭原则
    对扩展开放，对修改关闭。
        在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。
2 里氏代换原则
    任何基类可以出现的地方，子类一定可以出现。
        通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。
3 依赖倒转原则
    高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。
        简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。
4 接口隔离原则
    客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。
5 迪米特法则
    迪米特法则又叫最少知识原则。
    只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。
         其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
         迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，
         这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。
6 合成复用原则
    尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。